package mr

import (
	"errors"
	"fmt"
	"hash/fnv"
	"log"
	"net/rpc"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"unicode"
)

// Map functions return a slice of KeyValue.
type KeyValue struct {
	Key   string
	Value string
}

// use ihash(key) % NReduce to choose the reduce
// task number for each KeyValue emitted by Map.
func ihash(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32() & 0x7fffffff)
}

// main/mrworker.go calls this function.
func Worker(mapf func(string, string) []KeyValue,
	reducef func(string, []string) string) {

	redReply := getReduceReply{}
	GetReduce(&redReply)
	nReduce := redReply.nReduce
	// Your worker implementation here.

	// uncomment to send the Example RPC to the coordinator.
	// CallExample()
	for {
		getArg := GetTaskArgs{}
		getReply := GetTaskReply{}
		err := GetTask(&getArg, &getReply)
		if err != nil {
			fmt.Println(err)
		}
		if getReply.taskType == "MAP" {
			data, err := os.ReadFile(getReply.file)
			if err != nil {
				fmt.Println(err)
			}
			kva := Map(getReply.file, string(data))
			err = writeMap(&kva, nReduce)
			if err != nil {
				fmt.Println(err)
			}
		}
	}

}

func writeMap(kva *[]KeyValue, nReduce int) error {
	if kva == nil {
		return errors.New("No kva data")
	}
	pid := os.Getpid()
	dirname := "temp"
	err := os.MkdirAll(dirname, 0755)
	if err != nil {
		return err
	}
	for i := 0; i < nReduce; i++ {
		filename := fmt.Sprintf("mr-%d-%d", pid, i)
		filepath := filepath.Join(dirname, filename)
		file, err := os.Create(filepath)
		if err != nil {
			fmt.Println("Error creating file:", err)
			continue
		}
		file.Close()
	}

	for _, d := range *kva {
		id := ihash(d.Key) % nReduce
		filename := fmt.Sprintf("mr-%d-%d", pid, id)
		filepath := filepath.Join(dirname, filename)
		file, err := os.OpenFile(filepath, os.O_APPEND|os.O_WRONLY, 0644)
		if err != nil {
			fmt.Println("Error creating file:", err)
			continue
		}
		defer file.Close()
		_, err = file.WriteString(d.Value)
		if err != nil {
			fmt.Println("Error writing:", err)
		}
	}

	return nil
}

func GetReduce(redReply *getReduceReply) error {
	redArg := getReduceArgs{}
	ok := call("Coordinator.GetReduce", redArg, redReply)
	if ok {
		// reply.Y should be 100.
		return nil
	} else {
		err := errors.New("Get Task Error")
		return err
	}
}

func GetTask(getArg *GetTaskArgs, getReply *GetTaskReply) error {

	ok := call("Coordinator.GetTask", getArg, getReply)
	if ok {
		// reply.Y should be 100.
		return nil
	} else {
		err := errors.New("Get Task Error")
		return err
	}
}

// example function to show how to make an RPC call to the coordinator.
//
// the RPC argument and reply types are defined in rpc.go.
func CallExample() {

	// declare an argument structure.
	args := ExampleArgs{}

	// fill in the argument(s).
	args.X = 99

	// declare a reply structure.
	reply := ExampleReply{}

	// send the RPC request, wait for the reply.
	// the "Coordinator.Example" tells the
	// receiving server that we'd like to call
	// the Example() method of struct Coordinator.
	ok := call("Coordinator.Example", &args, &reply)
	if ok {
		// reply.Y should be 100.
		fmt.Printf("reply.Y %v\n", reply.Y)
	} else {
		fmt.Printf("call failed!\n")
	}
}

// send an RPC request to the coordinator, wait for the response.
// usually returns true.
// returns false if something goes wrong.
func call(rpcname string, args interface{}, reply interface{}) bool {
	// c, err := rpc.DialHTTP("tcp", "127.0.0.1"+":1234")
	sockname := coordinatorSock()
	c, err := rpc.DialHTTP("unix", sockname)
	if err != nil {
		log.Fatal("dialing:", err)
	}
	defer c.Close()

	err = c.Call(rpcname, args, reply)
	if err == nil {
		return true
	}

	fmt.Println(err)
	return false
}

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
